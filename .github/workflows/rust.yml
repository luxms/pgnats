name: Rust

on:
  push:
    branches: ["main", "ghactions", "pgpro"]
  pull_request:
    branches: ["main", "pgpro"]

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.generate-cache-key.outputs.cache-key }}

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libreadline-dev zlib1g-dev flex bison libxml2-dev libxslt-dev libssl-dev libxml2-utils xsltproc ccache pkg-config

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          cache: true
          cache-key: ${{ steps.generate-cache-key.outputs.cache-key }}

      - name: Generate cache key
        id: generate-cache-key
        run: |
          echo "cache-key=${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('.cargo-pgrx-version') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ~/.cargo/bin
            ~/.pgrx
          key: ${{ steps.generate-cache-key.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Update pgnats dependencies
        run: cargo update

      - name: Install pgrx
        run: |
          PGRX_VERSION=$(cat .cargo-pgrx-version)
          if ! command -v cargo-pgrx &> /dev/null; then
            cargo install --locked cargo-pgrx --version "$PGRX_VERSION"
          else
            CURRENT_VERSION=$(cargo pgrx --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
            if [ "$CURRENT_VERSION" != "$PGRX_VERSION" ]; then
              echo "Updating cargo-pgrx from $CURRENT_VERSION to $PGRX_VERSION..."
              cargo install --locked cargo-pgrx --version "$PGRX_VERSION" --force
            fi
          fi
          if [ ! -d "$HOME/.pgrx" ]; then
            cargo pgrx init
          fi

  tests:
    runs-on: ubuntu-latest
    needs: setup
    services:
      nats:
        image: nats:alpine
        ports:
          - 4222:4222
        options: --name jetstream

    steps:
      - uses: actions/checkout@v4

      - name: Restart NATS with Jetstream
        run: |
          chmod a+x ${{ github.workspace }}/.github/workflows/nats_entrypoint.sh
          docker cp ${{ github.workspace }}/.github/workflows/nats_entrypoint.sh jetstream:/usr/local/bin/docker-entrypoint.sh
          docker restart jetstream

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ~/.cargo/bin
            ~/.pgrx
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Wait for NATS
        run: timeout 60 sh -c 'until nc -z localhost 4222; do sleep 1; done'

      - name: Run pgrx tests
        run: cargo pgrx test

  clippy:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ~/.cargo/bin
            ~/.pgrx
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Clippy
        run: cargo clippy -- -D warnings
